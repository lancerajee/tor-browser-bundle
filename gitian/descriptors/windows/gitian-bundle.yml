---
name: "bundle-windows"
suites:
- "precise"
architectures:
- "i386"
packages:
- "unzip"
- "zip"
- "nsis"
# Needed to compensate NSIS's failure of regenerating the PE-file checksum and
# proper padding.
- "python-pefile"
# These three packages are needed for assembling the HTTPS-Everywhere rules
# since 5.0.
- "python-lxml"
- "libxml2-utils"
- "sqlite3"
reference_datetime: "2000-01-01 00:00:00"
remotes:
- "url": "https://github.com/moba/tbb-windows-installer.git"
  "dir": "tbb-windows-installer"
- "url": "https://git.torproject.org/tor-launcher.git"
  "dir": "tor-launcher"
- "url": "https://git.torproject.org/torbutton.git"
  "dir": "torbutton"
- "url": "https://git.torproject.org/https-everywhere.git"
  "dir": "https-everywhere"
- "url": "https://git.torproject.org/pluggable-transports/meek.git"
  "dir": "meek"
- "url": "https://github.com/wolfcw/libfaketime"
  "dir": "faketime"
files:
# TODO: Can we use an env for this file+version??
- "tor-browser-win32-gbuilt.zip"
- "tor-win32-gbuilt.zip"
- "pluggable-transports-win32-gbuilt.zip"
- "torrc-defaults-appendix-windows"
- "bridge_prefs.js"
- "meek-http-helper-user.js"
- "windows-skeleton.zip"
- "win32-langpacks.zip"
- "noscript@noscript.net.xpi"
- "dzip.sh"
- "bare-version"
- "bundle.inputs"
- "versions"
- "mar-tools-win32.zip"
- "tbb-docs.zip"
- "pe_checksum_fix.py"
script: |
  INSTDIR="$HOME/install"
  source versions
  export LIBRARY_PATH="$INSTDIR/lib"
  export TZ=UTC
  export TORBROWSER_VERSION=`cat bare-version`
  export LC_ALL=C
  umask 0022

  # Building libfaketime
  cd faketime
  make
  DESTDIR="$INSTDIR/faketime" make install
  export LD_PRELOAD="$INSTDIR/faketime/usr/local/lib/faketime/libfaketime.so.1"
  export FAKETIME=$REFERENCE_DATETIME
  export FAKETIME_SKIP_CMDS="rsync"
  cd ..

  # Extract the MAR tools.
  unzip -d ~/build ~/build/mar-tools-win32.zip
  MARTOOLS=~/build/mar-tools
  #
  mkdir -p $OUTDIR/
  mkdir -p tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/https-everywhere-eff@eff.org
  mkdir -p tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.meek-http-helper/extensions
  mkdir -p tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/Caches
  mkdir -p tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Docs/sources
  #
  cd tor-launcher
  make clean
  make package
  # FIXME: Switch to re-dzip.sh here?
  mkdir pkg/tmp
  cd pkg/tmp
  unzip ../*.xpi
  ~/build/dzip.sh ../../../tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/tor-launcher@torproject.org.xpi .
  cd ../../../
  #
  cd torbutton
  mkdir -p pkg/tmp
  ./makexpi.sh
  # FIXME: Switch to re-dzip.sh here?
  cd pkg/tmp
  unzip ../*.xpi
  ~/build/dzip.sh ../../../tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/torbutton@torproject.org.xpi .
  cd ../../../
  #
  cd https-everywhere
  # We are invoking the build script with a particular tag to avoid #10066. This
  # does not work for nightlies as there is no "master" tag in that sense. But
  # we don't need to care about that as we don't need reproducibility for
  # nightly builds.
  if [ $HTTPSE_TAG != "master" ];
  then
    ./makexpi.sh $HTTPSE_TAG
  else
    ./makexpi.sh
  fi
  # Since 5.0.2 a .xpi for AMO is built, too. We don't need it.
  rm ./pkg/*-amo.xpi
  cp ./pkg/*.xpi ../tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/https-everywhere@eff.org.xpi
  cd ..
  #
  cp *.xpi tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions
  cd tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions
  mv noscript@noscript.net.xpi {73a6fe31-595d-460b-a920-fcc0f8843232}.xpi
  cd https-everywhere-eff@eff.org
  unzip ../https-everywhere@eff.org.xpi
  rm ../https-everywhere@eff.org.xpi
  cd ~/build/
  #
  cd meek/firefox
  ~/build/dzip.sh ../meek-http-helper@bamsoftware.com.xpi .
  mv ../meek-http-helper@bamsoftware.com.xpi ../../tbb-windows-installer/"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.meek-http-helper/extensions/meek-http-helper@bamsoftware.com.xpi
  cd ~/build/
  #
  cd tbb-windows-installer/"Tor Browser"
  unzip ~/build/tor-browser-win32-gbuilt.zip
  cd Browser/TorBrowser
  unzip ~/build/tor-win32-gbuilt.zip
  unzip ~/build/windows-skeleton.zip
  unzip ~/build/tbb-docs.zip
  if [ $BUILD_PT_BUNDLES ]; then
    unzip ~/build/pluggable-transports-win32-gbuilt.zip
    cat ~/build/torrc-defaults-appendix-windows >> Data/Tor/torrc-defaults
    cat ~/build/bridge_prefs.js >> Data/Browser/profile.default/preferences/extension-overrides.js
    cat ~/build/meek-http-helper-user.js >> Data/Browser/profile.meek-http-helper/user.js
  fi
  cd ../../..
  #
  # Copy reproducibility info
  cp ../versions "Tor Browser"/Browser/TorBrowser/Docs/sources/
  cp ../bundle.inputs "Tor Browser"/Browser/TorBrowser/Docs/sources/
  #
  pushd "Tor Browser"/Browser/browser/
  unzip omni.ja defaults/preferences/000-tor-browser.js
  cp defaults/preferences/000-tor-browser.js ~/build/
  # Set the locale bundle.
  echo "pref(\"general.useragent.locale\", \"en-US\");" >> defaults/preferences/000-tor-browser.js
  zip -Xm omni.ja defaults/preferences/000-tor-browser.js
  rm -rf defaults
  popd
  #
  # Recreate precomplete file (needs to be accurate for full MAR updates).
  pushd "Tor Browser"/Browser/
  rm -f precomplete
  python $MARTOOLS/createprecomplete.py
  popd
  #
  # Create full MAR file and installer.
  # Strangely, mbsdiff is linked as mbsdiff.exe even though it is a host
  # (e.g., Linux) executable.
  MAR_FILE=tor-browser-win32-${TORBROWSER_VERSION}_en-US.mar
  MAR=$MARTOOLS/mar MBSDIFF=$MARTOOLS/mbsdiff.exe $MARTOOLS/make_full_update.sh -q $OUTDIR/$MAR_FILE "Tor Browser"/Browser
  makensis torbrowser.nsi
  # Working around NSIS braindamage
  mv torbrowser-install.exe torbrowser-install-tmp.exe
  python ~/build/pe_checksum_fix.py
  mv torbrowser-install-tmp2.exe torbrowser-install.exe
  rm torbrowser-install-tmp.exe
  mv torbrowser-install.exe $OUTDIR/torbrowser-install-${TORBROWSER_VERSION}_en-US.exe
  #
  unzip ../win32-langpacks.zip
  cd win32-langpacks
  for LANG in $BUNDLE_LOCALES
  do
    xpi=$LANG.xpi
    cp $xpi ../"Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/langpack-$LANG@firefox.mozilla.org.xpi
    cd ..

    pushd "Tor Browser"/Browser/browser/
    mkdir -p defaults/preferences
    cp ~/build/000-tor-browser.js defaults/preferences/
    echo "pref(\"general.useragent.locale\", \"$LANG\");" >> defaults/preferences/000-tor-browser.js
    zip -Xm omni.ja defaults/preferences/000-tor-browser.js
    rm -rf defaults
    popd

    # Set the update.locale (it is used to replace %LOCALE% within
    # app.update.url) and remove the en-US spellchecking dictionary.
    pushd "Tor Browser"/Browser/
    echo "$LANG" > update.locale
    zip -Xm omni.ja update.locale
    rm -rf dictionaries
    popd

    # Recreate precomplete file (needs to be accurate for full MAR updates).
    pushd "Tor Browser"/Browser/
    rm -f precomplete
    python $MARTOOLS/createprecomplete.py
    popd

    # Create full MAR file and installer for this locale.
    # Strangely, mbsdiff is linked as mbsdiff.exe even though it is a host
    # (e.g., Linux) executable.
    MAR_FILE=tor-browser-win32-${TORBROWSER_VERSION}_$LANG.mar
    MAR=$MARTOOLS/mar MBSDIFF=$MARTOOLS/mbsdiff.exe $MARTOOLS/make_full_update.sh -q $OUTDIR/$MAR_FILE "Tor Browser"/Browser
    makensis torbrowser.nsi
    # Working around NSIS braindamage
    mv torbrowser-install.exe torbrowser-install-tmp.exe
    python ~/build/pe_checksum_fix.py
    mv torbrowser-install-tmp2.exe torbrowser-install.exe
    rm torbrowser-install-tmp.exe
    mv torbrowser-install.exe $OUTDIR/torbrowser-install-${TORBROWSER_VERSION}_$LANG.exe
    rm "Tor Browser"/Browser/TorBrowser/Data/Browser/profile.default/extensions/langpack-$LANG@firefox.mozilla.org.xpi
    cd win32-langpacks
  done
