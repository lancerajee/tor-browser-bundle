---
name: "utils-linux"
distro: "debian"
suites:
- "wheezy"
architectures:
- "amd64"
packages:
- "faketime"
- "automake"
- "libtool"
- "zip"
- "hardening-wrapper"
# Needed for compiling gold.
- "bison"
# Needed for compiling GCC.
- "libmpc-dev"
# These packages are needed for Python due to HTTPS-Everywhere >= 3.5.
- "libsqlite3-dev"
- "zlib1g-dev"
- "libxml2-dev"
- "libxslt-dev"
# Needed for passing the Python related part of configure in ESR 31.
- "libssl-dev"
# Needed for binutils (64bit) as we are building with PIE enabled.
- "libstdc++6-4.7-pic"
reference_datetime: "2000-01-01 00:00:00"
remotes:
- "url": "https://github.com/libevent/libevent.git"
  "dir": "libevent"
files:
- "binutils.tar.bz2"
- "gcc.tar.bz2"
- "openssl.tar.gz"
- "python.tar.bz2"
- "lxml.tar.gz"
- "gmp.tar.bz2"
- "versions"
- "dzip.sh"
- "libfaketime-asan.patch"
script: |
  INSTDIR="$HOME/install"
  source versions
  export TZ=UTC
  export LC_ALL=C
  export FAKETIME=$REFERENCE_DATETIME
  umask 0022

  # Config options for hardening-wrapper
  export DEB_BUILD_HARDENING=1
  export DEB_BUILD_HARDENING_STACKPROTECTOR=1
  export DEB_BUILD_HARDENING_FORTIFY=1
  export DEB_BUILD_HARDENING_FORMAT=1
  export DEB_BUILD_HARDENING_PIE=1

  # Building Binutils
  tar xjf binutils.tar.bz2
  # The libstdc++ shipped by default is non-PIC which breaks the binutils build
  # if we build with DEB_BUILD_HARDENING_PIE=1. We need to install a PIC one AND
  # make sure it gets used before the non-PIC one would.
  if [ $GBUILD_BITS == "64" ];
  then
    ln -s /usr/lib/gcc/x86_64-linux-gnu/4.7/libstdc++_pic.a libstdc++.a
    export LDFLAGS="-L/home/debian -lstdc++"
  fi
  cd binutils*
  # We want to use gold as the linker in our toolchain mainly as it is way
  # faster when linking Tor Browser code (especially libxul). But apart from
  # that it fixes #12103 and issues with ESR 31 and our Gitian setup as well
  # (see bug #12743).
  ./configure --prefix=$INSTDIR/binutils --disable-multilib --enable-gold --enable-plugins
  make $MAKEOPTS
  make install
  cd ..
  export PATH=$INSTDIR/binutils/bin:$PATH

  export LDFLAGS=""
  # We need to disable `-Werror=format-security` as GCC does not build with it
  # anymore. It seems it got audited for those problems already:
  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=48817.
  export DEB_BUILD_HARDENING_FORMAT=0
  # libfaketime gets into our way when building GCC 4.9.x. See:
  # https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61314 for details. Thus, we
  # avoid it for the toolchain and cross our fingers.
  # TODO: Test a newer libfaketime than 0.8.
  # Building GCC
  tar xjf gcc.tar.bz2
  cd gcc-*
  patch -p1 < ~/build/libfaketime-asan.patch
  ./configure --prefix=$INSTDIR/gcc --disable-multilib --enable-languages=c,c++
  make $MAKEOPTS
  make install
  cd ..

  export DEB_BUILD_HARDENING_FORMAT=1
  # Building Libevent
  cd libevent
  ./autogen.sh
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  ./configure --disable-static --prefix=$INSTDIR/libevent
  make $MAKEOPTS
  make install
  cd ..

  # Building OpenSSL
  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1
  tar xzf openssl.tar.gz
  cd openssl-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  ./config -shared --prefix=$INSTDIR/openssl enable-ec_nistp_64_gcc_128
  # Using $MAKEOPTS breaks the build. Might be the issue mentioned on
  # http://cblfs.cross-lfs.org/index.php/OpenSSL.
  make
  make install
  cd ..

  # Building Python
  # Fx 24 ESR and HTTPS Everywhere >= 3.5 do not work with Python < 2.7 anymore.
  # But 10.04 does only ship with Python 2.6. Thus, we compile 2.7 ourselves...
  tar xjf python.tar.bz2
  cd Python-*
  ./configure
  make $MAKEOPTS altinstall prefix=$INSTDIR/python exec-prefix=$INSTDIR/python
  cd ..

  # Building lxml
  export LD_PRELOAD=""
  tar xzf lxml.tar.gz
  cd lxml-*
  # Make sure we use our freshly built python binary here. Otherwise bad things
  # may happen when we do so in the bundle step assembling the HTTPS-Everywhere
  # rules.
  $INSTDIR/python/bin/python2.7 setup.py build
  cd build/lib*
  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1
  ~/build/dzip.sh lxml-$LXML_VER-linux$GBUILD_BITS-utils.zip lxml
  export LD_PRELOAD=""
  cp *utils.zip $OUTDIR
  cd ../../../

  # Building GMP
  tar xjf gmp.tar.bz2
  cd gmp-*
  find -type f -print0 | xargs -0 touch --date="$REFERENCE_DATETIME"
  # Even if we are not shipping libgmpxx anymore we still need --enable-xcc
  # during compile time.
  # --enable-fat makes the binaries slightly bigger but fixes reproducibility
  # issues when compiling on LXC. See bug 12238 comment 4.
  ./configure --prefix=$INSTDIR/gmp --disable-static --enable-shared --enable-cxx --enable-fat
  make
  make install
  cd ..

  # Grabbing the remaining results and making sure timestamps don't spoil them
  export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1
  cd $INSTDIR
  ~/build/dzip.sh binutils-$BINUTILS_VER-linux$GBUILD_BITS-utils.zip binutils
  ~/build/dzip.sh gcc-$GCC_VER-linux$GBUILD_BITS-utils.zip gcc
  ~/build/dzip.sh openssl-$OPENSSL_VER-linux$GBUILD_BITS-utils.zip openssl
  ~/build/dzip.sh libevent-${LIBEVENT_TAG#release-}-linux$GBUILD_BITS-utils.zip libevent
  ~/build/dzip.sh python-$PYTHON_VER-linux$GBUILD_BITS-utils.zip python
  ~/build/dzip.sh gmp-$GMP_VER-linux$GBUILD_BITS-utils.zip gmp
  cp *utils.zip $OUTDIR/
