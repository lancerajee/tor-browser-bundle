---
name: "bundle-mac"
suites:
- "precise"
architectures:
- "amd64"
packages:
- "unzip"
- "zip"
# These three packages are needed for assembling the HTTPS-Everywhere rules
# since 5.0.
- "python-lxml"
- "libxml2-utils"
- "sqlite3"
# Needed for the .dmgs
- "genisoimage"
- "cmake"
- "zlib1g-dev"
- "libbz2-dev"
reference_datetime: "2000-01-01 00:00:00"
remotes:
- "url": "https://git.torproject.org/tor-launcher.git"
  "dir": "tor-launcher"
- "url": "https://git.torproject.org/torbutton.git"
  "dir": "torbutton"
- "url": "https://git.torproject.org/https-everywhere.git"
  "dir": "https-everywhere"
- "url": "https://github.com/vasi/libdmg-hfsplus.git"
  "dir": "libdmg-hfsplus"
- "url": "https://git.torproject.org/pluggable-transports/meek.git"
  "dir": "meek"
- "url": "https://github.com/googlei18n/noto-fonts.git"
  "dir": "noto-fonts"
- "url": "https://github.com/wolfcw/libfaketime"
  "dir": "faketime"
files:
# TODO: Can we use an env for this file+version??
- "tor-browser-mac64-gbuilt.zip"
- "tor-mac64-gbuilt.zip"
- "pluggable-transports-mac64-gbuilt.zip"
- "torrc-defaults-appendix-mac"
- "bridge_prefs.js"
- "meek-http-helper-user.js"
- "TorBrowser.app.meek-http-helper.zip"
- "mac-skeleton.zip"
- "dmg-applications.tar.xz"
- "dmg-desktop.tar.xz"
- "mac-langpacks.zip"
- "noscript@noscript.net.xpi"
- "dzip.sh"
- "ddmg.sh"
- "background-plist.py"
- "libdmg.patch"
- "bare-version"
- "bundle.inputs"
- "versions"
- "mar-tools-mac64.zip"
- "tbb-docs.zip"
- "mac-tor.sh"
- "STIXv1.1.1-latex.zip"
script: |
  INSTDIR="$HOME/install"
  source versions
  export LIBRARY_PATH="$INSTDIR/lib"
  export TZ=UTC
  export TORBROWSER_VERSION=`cat bare-version`
  export LC_ALL=C
  umask 0022
  export TORBROWSER_APP="TorBrowser"
  export TORBROWSER_NAME="TorBrowserBundle"

  # Building libfaketime.
  cd faketime
  make
  DESTDIR="$INSTDIR/faketime" make install
  export LD_PRELOAD="$INSTDIR/faketime/usr/local/lib/faketime/libfaketime.so.1"
  export FAKETIME=$REFERENCE_DATETIME
  export FAKETIME_SKIP_CMDS="rsync"
  cd ..

  # Extract the MAR tools.
  unzip -d ~/build ~/build/mar-tools-mac$GBUILD_BITS.zip
  MARTOOLS=~/build/mar-tools
  #
  mkdir -p $OUTDIR/
  mkdir -p $TORBROWSER_NAME.app/TorBrowser/Data/Browser/profile.default/extensions/https-everywhere-eff@eff.org
  mkdir -p $TORBROWSER_NAME.app/TorBrowser/Data/Browser/profile.meek-http-helper/extensions
  mkdir -p $TORBROWSER_NAME.app/TorBrowser/Data/Browser/Caches
  mkdir -p $TORBROWSER_NAME.app/TorBrowser/Docs/sources
  mkdir -p $TORBROWSER_NAME.app/Contents/MacOS
  mkdir -p dmg
  #
  cd tor-launcher
  make clean
  make package
  # FIXME: Switch to re-dzip.sh here?
  mkdir pkg/tmp
  cd pkg/tmp
  unzip ../*.xpi
  ~/build/dzip.sh ../../../$TORBROWSER_NAME.app/TorBrowser/Data/Browser/profile.default/extensions/tor-launcher@torproject.org.xpi .
  cd ../../../
  #
  cd torbutton
  mkdir -p pkg
  ./makexpi.sh
  # FIXME: Switch to re-dzip.sh here?
  mkdir pkg/tmp
  cd pkg/tmp
  unzip ../*.xpi
  ~/build/dzip.sh ../../../$TORBROWSER_NAME.app/TorBrowser/Data/Browser/profile.default/extensions/torbutton@torproject.org.xpi .
  cd ../../../
  #
  cd https-everywhere
  # XXX: Bloody hack to workaround a bug in HTTPS_E's git hash extraction in
  # makexpi.sh. See https://trac.torproject.org/projects/tor/ticket/10066
  # The solution there does not work for us as doing something like
  # |./makexpi.sh foo| to build tag |foo| is a) trying to download the sources
  # during build time (again) and b) broken due to a certificate error.
  rm -f .git/refs/heads/master
  ./makexpi.sh
  # Since 5.0.2 a .xpi for AMO is built, too. We don't need it.
  rm ./pkg/*-amo.xpi
  cp pkg/*.xpi ../$TORBROWSER_NAME.app/TorBrowser/Data/Browser/profile.default/extensions/https-everywhere@eff.org.xpi
  cd ..
  #
  cp *.xpi ./$TORBROWSER_NAME.app/TorBrowser/Data/Browser/profile.default/extensions/
  cd $TORBROWSER_NAME.app/TorBrowser/Data/Browser/profile.default/extensions/
  mv noscript@noscript.net.xpi {73a6fe31-595d-460b-a920-fcc0f8843232}.xpi
  cd https-everywhere-eff@eff.org
  unzip ../https-everywhere@eff.org.xpi
  rm ../https-everywhere@eff.org.xpi
  cd ~/build/
  #
  cd meek/firefox
  ~/build/dzip.sh ../../$TORBROWSER_NAME.app/TorBrowser/Data/Browser/profile.meek-http-helper/extensions/meek-http-helper@bamsoftware.com.xpi .
  cd ~/build/
  #
  # Install fonts.
  mkdir -p $TORBROWSER_NAME.app/Contents/Resources/fonts
  NOTO_FONTS_HINTED="NotoSansArmenian-Regular.ttf NotoSansBengali-Regular.ttf NotoSansDevanagari-Regular.ttf NotoSansEthiopic-Regular.ttf NotoSansGujarati-Regular.ttf NotoSansGurmukhi-Regular.ttf NotoSansKannada-Regular.ttf NotoSansKhmer-Regular.ttf NotoSansLao-Regular.ttf NotoSansMalayalam-Regular.ttf NotoSansMyanmar-Regular.ttf NotoSansOriya-Regular.ttf NotoSansSinhala-Regular.ttf NotoSansTamil-Regular.ttf NotoSansTelugu-Regular.ttf NotoSansThaana-Regular.ttf NotoSansTibetan-Regular.ttf"
  for fontfile in $NOTO_FONTS_HINTED; do
    cp "noto-fonts/hinted/$fontfile" $TORBROWSER_NAME.app/Contents/Resources/fonts/
  done
  NOTO_FONTS_UNHINTED="NotoSansCanadianAboriginal-Regular.ttf NotoSansBuginese-Regular.ttf NotoSansCherokee-Regular.ttf NotoSansMongolian-Regular.ttf NotoSansYi-Regular.ttf"
  for fontfile in $NOTO_FONTS_UNHINTED; do
    cp "noto-fonts/unhinted/$fontfile" $TORBROWSER_NAME.app/Contents/Resources/fonts/
  done
  unzip -o STIXv1.1.1-latex.zip -d STIX
  cp "STIX/Fonts/fonts/opentype/public/stix/STIXMath-Regular.otf" $TORBROWSER_NAME.app/Contents/Resources/fonts/
  #
  unzip tor-mac$GBUILD_BITS-gbuilt.zip
  if [ $BUILD_PT_BUNDLES ]; then
    unzip pluggable-transports-mac$GBUILD_BITS-gbuilt.zip
  fi
  cd $TORBROWSER_NAME.app
  unzip ~/build/mac-skeleton.zip
  cd TorBrowser
  unzip ~/build/tbb-docs.zip
  if [ $BUILD_PT_BUNDLES ]; then
    cat ~/build/torrc-defaults-appendix-mac >> Data/Tor/torrc-defaults
    cat ~/build/bridge_prefs.js >> Data/Browser/profile.default/preferences/extension-overrides.js
    cat ~/build/meek-http-helper-user.js >> Data/Browser/profile.meek-http-helper/user.js
  fi
  # Install a "tor" shim that sets the working directory. See #10030.
  mv Tor/tor Tor/tor.real
  cp ~/build/mac-tor.sh Tor/tor
  cd ..
  unzip ~/build/tor-browser-mac$GBUILD_BITS-gbuilt.zip
  cd ..
  #
  # Copy reproducibility info
  cp versions $TORBROWSER_NAME.app/TorBrowser/Docs/sources/
  cp bundle.inputs $TORBROWSER_NAME.app/TorBrowser/Docs/sources/
  #
  # Set up DMG skeleton
  cd libdmg-hfsplus
  git am ~/build/libdmg.patch
  cmake CMakeLists.txt
  cd dmg
  make
  cd ../../dmg
  # FIXME: Desktop or Application as dest?
  tar -Jxvf ~/build/dmg-applications.tar.xz
  cd ..
  #
  pushd $TORBROWSER_NAME.app/Contents/Resources/browser/
  # For the proper search engines in our language packs
  unzip omni.ja chrome/en-US/locale/browser/searchplugins*
  mv chrome/en-US/locale/browser/searchplugins ~/build
  rm -rf chrome
  unzip omni.ja defaults/preferences/000-tor-browser.js
  cp defaults/preferences/000-tor-browser.js ~/build/
  # Set the locale of the bundle.
  echo "pref(\"general.useragent.locale\", \"en-US\");" >> defaults/preferences/000-tor-browser.js
  zip -Xm omni.ja defaults/preferences/000-tor-browser.js
  rm -rf defaults
  popd
  # Install a headless copy of TorBrowser.app, with a modified Info.plist so
  # that it runs without a dock icon. See #11429.
  pushd $TORBROWSER_NAME.app/TorBrowser/Tor/PluggableTransports
  mkdir -p TorBrowser.app.meek-http-helper/Contents
  (cd TorBrowser.app.meek-http-helper/Contents && ln -s ../../../../../Contents/* .)
  rm -f TorBrowser.app.meek-http-helper/Contents/Info.plist
  ~/build/background-plist.py ../../../Contents/Info.plist > TorBrowser.app.meek-http-helper/Contents/Info.plist
  unzip ~/build/TorBrowser.app.meek-http-helper.zip
  popd

  unzip mac-langpacks.zip
  MAC_LOCALES="$BUNDLE_LOCALES $BUNDLE_LOCALES_MAC"
  # Prepare our language packs for using the proper search engines. See bug
  # 18915 for more details.
  for LANG in $MAC_LOCALES
  do
    xpi=mac-langpacks/$LANG.xpi
    unzip -d prep_$LANG $xpi
    search_plugins_path=prep_$LANG/browser/chrome/$LANG/locale/browser
    rm -rf $search_plugins_path/searchplugins
    cp -rf ~/build/searchplugins $search_plugins_path
    rm $xpi
    cd prep_$LANG
    ~/build/dzip.sh ../$xpi .
    cd ..
    rm -rf prep_$LANG
  done
  PKG_LOCALE="en-US"
  # If we are building a multi-lingual package, add all of the language packs
  # and use "ALL" in the package name and as the locale for update purposes.
  if [ "z$MULTI_LINGUAL" = "z1" ]; then
    PKG_LOCALE="ALL"
    pushd mac-langpacks
    for LANG in $MAC_LOCALES
    do
      xpi=$LANG.xpi
      cp $xpi ~/build/$TORBROWSER_NAME.app/TorBrowser/Data/Browser/profile.default/extensions/langpack-$LANG@firefox.mozilla.org.xpi
    done
    popd

    # Set the update.locale to ALL (it is used to replace %LOCALE% within
    # app.update.url).
    pushd ~/build/$TORBROWSER_NAME.app/Contents/Resources/
    echo $PKG_LOCALE > update.locale
    zip -Xm omni.ja update.locale
    popd
  fi
  #
  # XXX: We need to insert these placeholders because otherwise mkisofs won't
  # include these otherwise empty dirs:
  touch ~/build/$TORBROWSER_NAME.app/TorBrowser/Data/Browser/Caches/placeholder.txt
  # Recreate precomplete file (needs to be accurate for full MAR updates).
  pushd ~/build/$TORBROWSER_NAME.app/Contents/Resources/
  rm -f precomplete
  python $MARTOOLS/createprecomplete.py
  popd
  #
  # Create full MAR file and disk image.
  MAR_FILE=tor-browser-osx${GBUILD_BITS}-${TORBROWSER_VERSION}_${PKG_LOCALE}.mar
  MAR=$MARTOOLS/mar MBSDIFF=$MARTOOLS/mbsdiff $MARTOOLS/make_full_update.sh -q $OUTDIR/$MAR_FILE ~/build/$TORBROWSER_NAME.app
  cp -a ~/build/$TORBROWSER_NAME.app ~/build/dmg/$TORBROWSER_APP.app
  ~/build/ddmg.sh $OUTDIR/TorBrowser-${TORBROWSER_VERSION}-osx${GBUILD_BITS}_${PKG_LOCALE}.dmg ~/build/dmg
  rm -rf ~/build/dmg/$TORBROWSER_APP.app
  mv $TORBROWSER_NAME.app ${TORBROWSER_NAME}_plain.app

  # If we did not create a multi-lingual package above, create a package for
  # each locale.
  if [ "z$MULTI_LINGUAL" != "z1" ]; then
    for LANG in $MAC_LOCALES
    do
      xpi=mac-langpacks/$LANG.xpi
      DEST=$TORBROWSER_APP
      cp -a ${TORBROWSER_NAME}_plain.app ~/build/dmg/$DEST.app
      cp $xpi ~/build/dmg/$DEST.app/TorBrowser/Data/Browser/profile.default/extensions/langpack-$LANG@firefox.mozilla.org.xpi

      pushd ~/build/dmg/$DEST.app/Contents/Resources/browser/
      mkdir -p defaults/preferences
      cp ~/build/000-tor-browser.js defaults/preferences/
      # Set the locale of the bundle.
      echo "pref(\"general.useragent.locale\", \"$LANG\");" >> defaults/preferences/000-tor-browser.js
      zip -Xm omni.ja defaults/preferences/000-tor-browser.js
      rm -rf defaults
      popd

      # Set the update.locale (it is used to replace %LOCALE% within
      # app.update.url), remove the en-US spellchecking dictionary, and recreate
      # the precomplete file (needs to be accurate for full MAR updates).
      pushd ~/build/dmg/$DEST.app/Contents/Resources/
      echo "$LANG" > update.locale
      zip -Xm omni.ja update.locale
      rm -rf dictionaries
      rm -f precomplete
      python $MARTOOLS/createprecomplete.py
      popd
      #
      MAR_FILE=tor-browser-osx${GBUILD_BITS}-${TORBROWSER_VERSION}_$LANG.mar
      MAR=$MARTOOLS/mar MBSDIFF=$MARTOOLS/mbsdiff $MARTOOLS/make_full_update.sh -q $OUTDIR/$MAR_FILE ~/build/dmg/$DEST.app
      # Rename the Japanese bundle to not confuse users
      if [ "$LANG" = "ja-JP-mac" ]; then
        LANG="ja"
      fi
      ~/build/ddmg.sh $OUTDIR/TorBrowser-${TORBROWSER_VERSION}-osx${GBUILD_BITS}_$LANG.dmg ~/build/dmg/
      rm -rf ~/build/dmg/$DEST.app
    done
  fi
