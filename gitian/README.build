QuickStart:

 On an Ubuntu 12.04+ machine or VM, run:

 $ make

 This will check all of your prerequisites and tell you what you need to
 do to get started to build the stable TBB.

 If everything checks out OK, it will begin downloading dependencies, and then
 start the build process to produce localized Linux bundles, followed by
 Windows bundles, followed by Mac bundles.

 To check your build results against the official builders, run:

 $ make match

 By default, the Makefile wraps input downloads in 'torsocks'. This is done
 to allow unofficial secret verifiers to remain secret by default. To download
 inputs without torsocks, run:

 $ make TORSOCKS=

 By default, 'make' will also clear out any previous partial builds. See the
 "Partial Rebuilds" section for information on performing partial rebuilds
 without erasing previously built components.

 If you would also like to download fresh copies of your inputs before a
 build, run 'make distclean' (note that timestamps and versions of downloaded
 source input files are checked every time you run 'make' by default so
 distclean should not normally be needed).

 To set the number of make processes and virtual CPUs to use inside the VMs
 to four (the default is two), use:

 $ export NUM_PROCS=4

 To set the amount of RAM to use inside the VMs to 4000 MiB (the default is
 2000 MiB), use:

 $ export VM_MEMORY=4000

Detailed Explanation of Scripts:

 This directory is a wrapper around our modified version of Gitian, and has
 several helper scripts to make things easier.

 0. Makefile: The main Makefile. It has six main commands:
     - prep: Check OS prerequisites and download source dependency inputs
     - build: Build localized bundles for Linux, Windows, and Mac
     - clean: Remove prior partial build stages (Tor and Firefox)
     - vmclean: Remove VM base images
     - distclean: Remove source dependency inputs, and run clean and vmclean
     - all: The default. It calls clean, prep, and then build.
     - sign: Signs your build output and uplodas it to people.torproject.org
     - match: Checks your build output against public signed hashes
    To build alpha bundles, alternate targets are provided:
     - alpha: The equivalent to the 'all' rule for alpha packages
     - build-alpha: The equivalent to the 'build' rule for alpha packages
     - prep-alpha: The equivalent to the 'prep' rule for alpha packages
     - sign-alpha: Signs your build output and uplodas it to people.torproject.org
     - match-alpha: Checks your build output against public signed hashes
 
 1. check-prerequisites.sh: This script checks if your system is capable of
    running Gitian, and if it is not, it tells you what you need to do.
    It is called by 'make prep'.
 
 2. fetch-inputs.sh: This script fetches all of our source dependencies from
    the Internet and downloads them into ../../gitian-builder/inputs.
    After you run this script, you should be able to complete the rest of your
    build offline.

 3. versions: This scriptlet contains version definitions for the source
    dependencies, the git tags to use, and the Tor Browser release version.

 4. verify-tags.sh: This script verifies the signatures on git tags from
    the versions file. It is only run if VERIFY_TAGS is set in the versions
    file.
  
 5. descriptors: In the descriptors directory, you will find the Gitian
    descriptors for Linux, Windows, and Mac. There are three descriptors for
    each platform: One to build Tor and its dependencies, one to build Firefox
    and its dependencies, and one to bundle everything together. Each
    descriptor is run from a fresh VM.
 
 6. mkbundle-linux.sh: This script is a wrapper around Gitian's gbuild to call
    the appropriate descriptors to build 32 and 64 bit Linux bundle. It also will
    create build VM images for you if you haven't done that before.
 
 7. mkbundle-windows.sh: This script is a wrapper around Gitian's gbuild to
    call the appropriate descriptors to build a Windows bundle. It also will
    create build VM images for you if you haven't done that before.

 8. mkbundle-mac.sh: This script is a wrapper around Gitian's gbuild to
    call the appropriate descriptors to build a 32bit Mac bundle. It also
    will create build VM images for you if you haven't done that before.


Partial Rebuilds:

  The mkbundle shell scripts each have three Gitian stages.

  First, using their platform's gitian-tor.yml Gitian descriptor, they build
  tor and the tor dependencies (libevent, zlib, and openssl). Second, using
  the gitian-firefox.yml descriptor, they build Firefox with the Tor Browser
  patches and preferences applied. Third, in gitian-bundle.yml, they assemble
  the bundles using the addons and localization packs.

  The Tor and Firefox stages end up as a *gbuilt*.zip files in
  ../../gitian-builder/inputs/, and those zip files are used as inputs into
  the final bundling and localization stage. If those files exist in that
  directory, the corresponding bundle will *not* be built.

  No other dependency checking on build stages is performed.

  This means that if any of the source inputs, or the Ubuntu buildchain tools,
  or the build tools' dependencies upgrade, your Tor and Firefox inputs will
  no longer match those produced by someone else's build from a fresher VM
  that downloaded those newer toolchain packages.

  This means for official builds, you should always run 'make clean' (which
  is called by the default Makefile target).


Known Issues and Quirks:

  1. Sometimes, fresh VM installs can fail. If your build hangs while trying
     to connect to the target or during the SSH banner, it might be worth
     running 'make vmclean && make build' to clean your VM images, but still
     resume the build process as the component you left off at.  Remember,
     'make' by itself runs a clean rule that will wipe your previous builds by
     default.

     If you have already completed a Linux build, you may run into situations
     where 'make vmclean' causes the rebuild of two VMs in a row.. This might
     trigger weird bugs in python-vm-builder.. To rebuild only one set of VMs,
     use either 'rm ../../gitian-builder/*precise*' (to remove the Windows/Mac
     VMs) or 'rm ../../gitian-builder/*lucid*' (to remove the Linux VMs).

     You probably want to make sure you have no stray qemu processes before
     rebuilding the VMs or starting a new build, too.

     Once you get a working set of base VMs (in ../../gitian-builder/base-*),
     you should probably copy them somewhere safe if you want to avoid VM
     creation hangs in the future (or help us write a wrapper script that
     tests VMs and re-runs the VM creation step if they don't boot).

  2. One out of every 50 builds or so, 'make' locks up at some point during a
     build, probably due to timestamp issues inside the Gitian VM. The
     symptoms of this are a hung build where the VM or LXC container processes
     are consuming no CPU.

     Simply re-running 'make build' will resume the appropriate bundle
     component for you.

  3. If you use git branches for any repos instead of tags (for example, for
     a development or nightly build), fresh commits will need to be
     merged manually (or better git-fu is needed in ./fetch-inputs.sh, as
     it is currently meant to deal with tags only).

  4. Running more than one instance of Gitian at a time is not supported.

  5. Related: If you perform a fresh Gitian checkout for purposes of
     verification, be sure to kill any stray qemu VM processes before starting
     the new build (because the new Gitian checkout will not have the PID or
     SSH keys of the previous instances' VM, and VM startup will either hang
     or prompt you for an SSH password).

  6. The number of cpus in the VM images is currently hardcoded at 4. If you
     need a different number, please let me know and I will write a patch to 
     support configuring the number of CPUs easily.

  7. LXC-built bundles are still not deterministic and may run into other issues.
     See TODO file for details.

Diagnosing Problems:

  During a running build, you can tail logs in real time in
  ../../gitian-builder/var/*.log 

  Upon failure, logs of any failed component builds are relocated to
  ../../gitian-builder/*fail*.log. This is to prevent subsequent builds
  from destroying failure information.

